/* The following code was generated by JFlex 1.4.3 on 5/28/14 7:43 PM */

package compiler.lexanal;

import java.io.*;

import compiler.report.*;
import compiler.synanal.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/28/14 7:43 PM from the specification file
 * <tt>pascal.jflex</tt>
 */
public class PascalLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\2\2\0\1\54\22\0\1\2\6\0\1\53\1\45"+
    "\1\50\1\43\1\44\1\31\1\52\1\36\1\0\12\41\1\35\1\23"+
    "\1\14\1\34\1\33\1\47\1\0\32\51\1\21\1\0\1\40\1\37"+
    "\1\51\1\0\1\11\1\30\1\16\1\26\1\7\1\10\1\24\1\22"+
    "\1\17\2\51\1\12\1\42\1\15\1\20\1\27\1\51\1\5\1\13"+
    "\1\4\1\6\1\32\1\46\1\51\1\25\1\51\1\1\1\0\1\3"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\6\4\1\5\4\4\1\6"+
    "\1\7\3\4\1\10\1\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\4\1\23"+
    "\1\24\1\25\2\1\1\3\1\26\1\4\1\27\12\4"+
    "\1\30\1\31\4\4\1\32\1\4\1\33\1\34\1\4"+
    "\1\35\4\4\1\36\1\37\1\40\1\4\2\0\5\4"+
    "\1\41\2\4\1\42\1\4\1\43\1\44\1\45\3\4"+
    "\1\46\3\4\1\47\1\4\1\50\1\51\1\52\1\53"+
    "\1\4\1\54\3\4\1\55\11\4\1\56\1\57\3\4"+
    "\1\60\1\4\1\61\1\62\1\63\6\4\1\64\1\4"+
    "\1\65\1\66\1\67\1\4\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\132\0\207\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\132\0\132\0\u02a3\0\u02d0\0\u02fd\0\132\0\u032a\0\u0357"+
    "\0\132\0\u0384\0\u03b1\0\132\0\132\0\u03de\0\132\0\132"+
    "\0\132\0\u040b\0\132\0\132\0\132\0\u0438\0\207\0\132"+
    "\0\132\0\u0465\0\u010e\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\132\0\132\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u010e\0\u0708\0\u010e\0\u010e\0\u0735"+
    "\0\u010e\0\u0762\0\u078f\0\u07bc\0\u07e9\0\132\0\132\0\132"+
    "\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951"+
    "\0\u010e\0\u097e\0\u09ab\0\u010e\0\u09d8\0\u010e\0\u010e\0\u010e"+
    "\0\u0a05\0\u0a32\0\u0a5f\0\u010e\0\u0a8c\0\u0ab9\0\u0ae6\0\u010e"+
    "\0\u0b13\0\132\0\u010e\0\u010e\0\u0b40\0\u0b6d\0\u010e\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u010e\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u010e\0\u010e\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u010e\0\u0e3d\0\u010e\0\u010e\0\u010e\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u010e\0\u0f78\0\u010e\0\u010e"+
    "\0\u010e\0\u0fa5\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\10\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\10\1\22\2\10\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\10\1\37\1\40\1\41\1\42\1\43\1\44\1\10"+
    "\1\45\1\46\1\47\1\50\1\4\1\5\1\51\50\50"+
    "\1\5\57\0\1\5\51\0\1\5\4\0\1\10\1\52"+
    "\6\10\1\0\3\10\1\53\1\0\1\54\1\0\1\10"+
    "\1\55\3\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\3\10\1\56\4\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\6\10\1\57\1\10"+
    "\1\0\1\60\3\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\2\10\1\61\2\10\1\62\2\10\1\0\3\10\1\63"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\1\10\1\64\6\10"+
    "\1\0\1\65\3\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\36\0"+
    "\1\66\1\67\24\0\10\10\1\0\2\10\1\70\1\71"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\3\10"+
    "\1\72\1\0\1\73\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\4\10\1\74"+
    "\3\10\1\0\1\75\3\10\1\0\1\10\1\0\5\10"+
    "\1\0\1\10\6\0\2\10\3\0\1\10\2\0\1\10"+
    "\7\0\1\10\1\76\2\10\1\77\3\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\2\10"+
    "\1\100\1\101\1\0\1\10\1\0\5\10\1\0\1\10"+
    "\6\0\2\10\3\0\1\10\2\0\1\10\7\0\1\10"+
    "\1\102\6\10\1\0\4\10\1\0\1\10\1\0\5\10"+
    "\1\0\1\10\6\0\2\10\3\0\1\10\2\0\1\10"+
    "\7\0\3\10\1\103\4\10\1\0\3\10\1\104\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\5\10\1\105\2\10\1\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\37\0\1\106\54\0"+
    "\1\107\56\0\1\110\57\0\1\36\17\0\10\10\1\0"+
    "\4\10\1\0\1\111\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\3\0\53\112\1\113"+
    "\1\112\4\0\2\10\1\114\5\10\1\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\3\10\1\115\4\10\1\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\10\10\1\0"+
    "\4\10\1\0\1\10\1\0\3\10\1\116\1\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\10\10\1\0\1\10\1\117\2\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\7\10\1\120\1\0\4\10\1\0\1\10"+
    "\1\0\5\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\10\10\1\0\4\10\1\0\1\10"+
    "\1\0\2\10\1\121\2\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\1\122"+
    "\3\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\6\10\1\123"+
    "\1\10\1\0\4\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\1\10\1\124\6\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\1\10\1\125\6\10\1\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\10\10\1\0\4\10\1\0"+
    "\1\10\1\0\2\10\1\126\2\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\6\10\1\127"+
    "\1\10\1\0\4\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\1\130\7\10\1\0\4\10\1\0\1\10\1\0\5\10"+
    "\1\0\1\10\6\0\2\10\3\0\1\10\2\0\1\10"+
    "\7\0\10\10\1\0\1\131\3\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\5\10\1\132\2\10\1\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\1\133\7\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\134\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\3\10"+
    "\1\135\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\10\10\1\0"+
    "\4\10\1\0\1\10\1\0\1\136\4\10\1\0\1\10"+
    "\6\0\2\10\3\0\1\10\2\0\1\10\7\0\10\10"+
    "\1\0\3\10\1\137\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\1\10\1\140\6\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\10\10\1\0\2\10\1\141\1\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\56\0\1\142\54\0\1\112\5\0"+
    "\3\10\1\143\4\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\10\10\1\0\1\144\3\10\1\0\1\10"+
    "\1\0\5\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\3\10\1\145\4\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\3\10"+
    "\1\146\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\3\10\1\147"+
    "\4\10\1\0\4\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\10\10\1\0\1\10\1\150\2\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\7\10\1\114\1\0\4\10\1\0\1\10"+
    "\1\0\5\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\5\10\1\151\2\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\7\10\1\152\1\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\1\10\1\153"+
    "\6\10\1\0\4\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\3\10\1\154\4\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\10\10\1\0\1\10\1\155\2\10\1\0"+
    "\1\10\1\0\1\156\4\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\10\10\1\0\2\10"+
    "\1\157\1\10\1\0\1\10\1\0\5\10\1\0\1\10"+
    "\6\0\2\10\3\0\1\10\2\0\1\10\7\0\6\10"+
    "\1\160\1\10\1\0\4\10\1\0\1\10\1\0\5\10"+
    "\1\0\1\10\6\0\2\10\3\0\1\10\2\0\1\10"+
    "\7\0\6\10\1\161\1\10\1\0\4\10\1\0\1\10"+
    "\1\0\5\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\10\10\1\0\3\10\1\162\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\1\10\1\163\6\10\1\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\1\164\7\10"+
    "\1\0\4\10\1\0\1\10\1\0\5\10\1\0\1\10"+
    "\6\0\2\10\3\0\1\10\2\0\1\10\7\0\10\10"+
    "\1\0\4\10\1\0\1\10\1\0\1\10\1\165\3\10"+
    "\1\0\1\10\6\0\2\10\3\0\1\10\2\0\1\10"+
    "\7\0\1\166\7\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\10\10\1\0\4\10\1\0\1\10\1\0"+
    "\1\167\4\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\3\10\1\170\4\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\1\10\1\171\6\10"+
    "\1\0\4\10\1\0\1\10\1\0\5\10\1\0\1\10"+
    "\6\0\2\10\3\0\1\10\2\0\1\10\7\0\10\10"+
    "\1\0\1\172\3\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\3\10\1\173\4\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\3\10\1\174\4\10\1\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\4\10\1\175\3\10\1\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\10\10\1\0"+
    "\4\10\1\0\1\10\1\0\2\10\1\176\2\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\10\10\1\0\2\10\1\177\1\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\3\10\1\200\4\10\1\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\10\10\1\0\4\10\1\0"+
    "\1\10\1\0\2\10\1\201\2\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\7\0\5\10\1\202"+
    "\2\10\1\0\4\10\1\0\1\10\1\0\5\10\1\0"+
    "\1\10\6\0\2\10\3\0\1\10\2\0\1\10\7\0"+
    "\5\10\1\203\2\10\1\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\10\10\1\0\3\10\1\204\1\0\1\10"+
    "\1\0\5\10\1\0\1\10\6\0\2\10\3\0\1\10"+
    "\2\0\1\10\7\0\1\10\1\205\6\10\1\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\0\1\10\6\0\2\10"+
    "\3\0\1\10\2\0\1\10\7\0\2\10\1\206\5\10"+
    "\1\0\4\10\1\0\1\10\1\0\5\10\1\0\1\10"+
    "\6\0\2\10\3\0\1\10\2\0\1\10\7\0\10\10"+
    "\1\0\4\10\1\0\1\10\1\0\5\10\1\0\1\10"+
    "\6\0\1\10\1\207\3\0\1\10\2\0\1\10\7\0"+
    "\10\10\1\0\1\210\3\10\1\0\1\10\1\0\5\10"+
    "\1\0\1\10\6\0\2\10\3\0\1\10\2\0\1\10"+
    "\7\0\10\10\1\0\1\211\3\10\1\0\1\10\1\0"+
    "\5\10\1\0\1\10\6\0\2\10\3\0\1\10\2\0"+
    "\1\10\7\0\1\10\1\212\6\10\1\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\0\1\10\6\0\2\10\3\0"+
    "\1\10\2\0\1\10\7\0\3\10\1\213\4\10\1\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\0\1\10\6\0"+
    "\2\10\3\0\1\10\2\0\1\10\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\14\1\2\11\3\1\1\11\2\1\1\11"+
    "\2\1\2\11\1\1\3\11\1\1\3\11\2\1\2\11"+
    "\14\1\2\11\16\1\3\11\1\1\2\0\26\1\1\11"+
    "\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	private static int errors = 0;
	
    private PascalSym sym(int type) 
    {
        return new PascalSym(type, yyline + 1, yycolumn + 1, yytext());
    }
    
	private void unclosed() {
    	Report.warning("Error: (Unclosed comment block) - each '{' must be closed by '}'", commentStartRow, commentStartCol);
    	errors++;
    }
    
	private static int nestedDepth = 0;
	private static int commentStartRow = 0;
	private static int commentStartCol = 0;
    
    private void startComment() {
    	if (nestedDepth == 0) {
    		commentStartRow = yyline + 1;
    		commentStartCol = yycolumn + 1;
    		yybegin(COMMENT);
    	}
    	nestedDepth++;
    }
    
    private void endComment() {
    	nestedDepth--;
    	if (nestedDepth == 0) yybegin(YYINITIAL);
    }
    
    private String errorArrow(int offset)
    {
    	String s = "";
    	for(int i = 0; i < offset; i++)
    	{
    		s += " ";
    	}
    	return "\n"+s+"^";
    }
    
    private void EndErrorReport()
    {
    	System.out.println("Total errors encountered: " + errors + "\nCompilation terminated due to errors...\n"); 
    	System.exit(1);
    }
    
    private void IncreaseErrorCount()
    {
    	errors++;
    	if (errors > 100) 
    	{
    		System.out.println("More than 100 errors...Abroting compilation");
    		System.exit(1);
    	}
    }
    
    private void ReportError()
    {
    	
    	if (yytext().equals("}")) Report.warning("Error (unrecognised token): '"+ yytext() + "' (comment may be closed too many times)" , yyline+1, yycolumn+1);
    	else Report.warning("Error (unrecognised token): '"+ yytext() + "' (charachter not defined)" , yyline+1, yycolumn+1);;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PascalLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PascalSym next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { return sym(PascalTok.SUB);
          }
        case 57: break;
        case 27: 
          { return sym(PascalTok.OR);
          }
        case 58: break;
        case 18: 
          { return sym(PascalTok.LPARENTHESIS);
          }
        case 59: break;
        case 2: 
          { startComment();
          }
        case 60: break;
        case 24: 
          { return sym(PascalTok.NEQ);
          }
        case 61: break;
        case 39: 
          { return sym(PascalTok.VAR);
          }
        case 62: break;
        case 9: 
          { return sym(PascalTok.GTH);
          }
        case 63: break;
        case 32: 
          { return sym(PascalTok.DOTS);
          }
        case 64: break;
        case 34: 
          { return sym(PascalTok.FOR);
          }
        case 65: break;
        case 47: 
          { return sym(PascalTok.CONST);
          }
        case 66: break;
        case 36: 
          { return sym(PascalTok.NIL);
          }
        case 67: break;
        case 7: 
          { return sym(PascalTok.SEMIC);
          }
        case 68: break;
        case 8: 
          { return sym(PascalTok.COMMA);
          }
        case 69: break;
        case 55: 
          { return sym(PascalTok.FUNCTION);
          }
        case 70: break;
        case 28: 
          { return sym(PascalTok.OF);
          }
        case 71: break;
        case 31: 
          { return sym(PascalTok.ASSIGN);
          }
        case 72: break;
        case 23: 
          { return sym(PascalTok.TO);
          }
        case 73: break;
        case 20: 
          { return sym(PascalTok.RPARENTHESIS);
          }
        case 74: break;
        case 51: 
          { return sym(PascalTok.RECORD);
          }
        case 75: break;
        case 16: 
          { return sym(PascalTok.MUL);
          }
        case 76: break;
        case 50: 
          { return sym(PascalTok.AUTO);
          }
        case 77: break;
        case 13: 
          { return sym(PascalTok.PTR);
          }
        case 78: break;
        case 12: 
          { return sym(PascalTok.DOT);
          }
        case 79: break;
        case 48: 
          { return sym(PascalTok.BEGIN);
          }
        case 80: break;
        case 25: 
          { return sym(PascalTok.LEQ);
          }
        case 81: break;
        case 53: 
          { return sym(PascalTok.PROGRAM);
          }
        case 82: break;
        case 15: 
          { return sym(PascalTok.INT_CONST);
          }
        case 83: break;
        case 6: 
          { return sym(PascalTok.LBRACKET);
          }
        case 84: break;
        case 43: 
          { return sym(PascalTok.TYPE);
          }
        case 85: break;
        case 17: 
          { return sym(PascalTok.ADD);
          }
        case 86: break;
        case 33: 
          { return sym(PascalTok.END);
          }
        case 87: break;
        case 22: 
          { endComment();
          }
        case 88: break;
        case 46: 
          { return sym(PascalTok.ARRAY);
          }
        case 89: break;
        case 44: 
          { return sym(PascalTok.ELSE);
          }
        case 90: break;
        case 52: 
          { return sym(PascalTok.INT);
          }
        case 91: break;
        case 41: 
          { return sym(PascalTok.BOOL_CONST);
          }
        case 92: break;
        case 42: 
          { return sym(PascalTok.THEN);
          }
        case 93: break;
        case 5: 
          { return sym(PascalTok.LTH);
          }
        case 94: break;
        case 37: 
          { return sym(PascalTok.NOT);
          }
        case 95: break;
        case 35: 
          { return sym(PascalTok.AND);
          }
        case 96: break;
        case 29: 
          { return sym(PascalTok.DO);
          }
        case 97: break;
        case 38: 
          { return sym(PascalTok.DIV);
          }
        case 98: break;
        case 19: 
          { return sym(PascalTok.QUEST);
          }
        case 99: break;
        case 11: 
          { return sym(PascalTok.COLON);
          }
        case 100: break;
        case 4: 
          { return sym(PascalTok.IDENTIFIER);
          }
        case 101: break;
        case 1: 
          { ReportError();IncreaseErrorCount();
          }
        case 102: break;
        case 40: 
          { return sym(PascalTok.CHAR_CONST);
          }
        case 103: break;
        case 26: 
          { return sym(PascalTok.IF);
          }
        case 104: break;
        case 45: 
          { return sym(PascalTok.CHAR);
          }
        case 105: break;
        case 14: 
          { return sym(PascalTok.RBRACKET);
          }
        case 106: break;
        case 54: 
          { return sym(PascalTok.BOOL);
          }
        case 107: break;
        case 49: 
          { return sym(PascalTok.WHILE);
          }
        case 108: break;
        case 56: 
          { return sym(PascalTok.PROCEDURE);
          }
        case 109: break;
        case 30: 
          { return sym(PascalTok.GEQ);
          }
        case 110: break;
        case 3: 
          { 
          }
        case 111: break;
        case 10: 
          { return sym(PascalTok.EQU);
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	if (nestedDepth > 0) unclosed();
    if(errors > 0) EndErrorReport();
    return new PascalSym(PascalTok.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
