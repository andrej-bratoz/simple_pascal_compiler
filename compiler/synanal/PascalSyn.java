
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 28 20:20:17 CEST 2014
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;
import compiler.abstree.tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 28 20:20:17 CEST 2014
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\002\000\002\003" +
    "\006\000\002\004\005\000\002\005\006\000\002\006\004" +
    "\000\002\006\003\000\002\012\003\000\002\012\004\000" +
    "\002\016\006\000\002\007\004\000\002\007\003\000\002" +
    "\013\003\000\002\013\004\000\002\017\006\000\002\010" +
    "\004\000\002\010\003\000\002\014\003\000\002\014\004" +
    "\000\002\020\006\000\002\020\011\000\002\011\003\000" +
    "\002\011\003\000\002\015\003\000\002\015\004\000\002" +
    "\021\003\000\002\021\003\000\002\022\011\000\002\023" +
    "\013\000\002\024\004\000\002\024\005\000\002\025\003" +
    "\000\002\025\005\000\002\026\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\012\000\002\027\005\000\002\030\003\000\002\030" +
    "\005\000\002\031\005\000\002\027\004\000\002\027\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\032" +
    "\006\000\002\032\005\000\002\032\004\000\002\033\004" +
    "\000\002\033\005\000\002\034\003\000\002\034\005\000" +
    "\002\035\003\000\002\032\005\000\002\032\005\000\002" +
    "\036\003\000\002\036\005\000\002\036\010\000\002\036" +
    "\006\000\002\036\007\000\002\036\006\000\002\036\012" +
    "\000\002\036\003\000\002\040\004\000\002\040\005\000" +
    "\002\037\003\000\002\037\005\000\002\016\003\000\002" +
    "\017\003\000\002\020\003\000\002\026\003\000\002\035" +
    "\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\065\006\001\002\000\016\053\000\054" +
    "\012\061\000\064\000\071\000\072\000\001\002\000\004" +
    "\002\011\001\002\000\004\010\007\001\002\000\004\024" +
    "\010\001\002\000\016\053\ufffe\054\ufffe\061\ufffe\064\ufffe" +
    "\071\ufffe\072\ufffe\001\002\000\004\002\001\001\002\000" +
    "\006\003\304\010\307\001\002\000\014\053\000\061\000" +
    "\064\000\071\211\072\000\001\002\000\014\053\ufffb\061" +
    "\ufffb\064\ufffb\071\ufffb\072\ufffb\001\002\000\004\053\016" +
    "\001\002\000\044\003\041\004\027\005\044\006\035\007" +
    "\033\010\026\020\031\021\037\027\040\042\024\044\021" +
    "\045\034\053\016\057\025\060\043\062\030\073\023\001" +
    "\002\000\004\016\020\001\002\000\004\002\uffff\001\002" +
    "\000\030\004\027\005\044\006\035\007\033\010\026\020" +
    "\031\021\037\027\040\042\024\044\021\045\034\001\002" +
    "\000\006\024\uffaa\057\uffaa\001\002\000\030\004\027\005" +
    "\044\006\035\007\033\010\026\020\031\021\037\027\040" +
    "\042\024\044\021\045\034\001\002\000\030\004\027\005" +
    "\044\006\035\007\033\010\026\020\031\021\037\027\040" +
    "\042\024\044\021\045\034\001\002\000\014\014\uffac\016" +
    "\uffac\024\uffac\056\uffac\057\uffac\001\002\000\074\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\170\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\052\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\067\uffbf\070\uffbf\001\002\000\072\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\052\uffd4\055\uffd4\056\uffd4\057\uffd4\067\uffd4\070\uffd4\001" +
    "\002\000\030\004\027\005\044\006\035\007\033\010\026" +
    "\020\031\021\037\027\040\042\024\044\021\045\034\001" +
    "\002\000\022\010\136\011\131\012\137\013\127\021\130" +
    "\044\135\051\132\066\134\001\002\000\012\014\uffad\024" +
    "\uffad\056\uffad\057\uffad\001\002\000\072\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\052\uffd1\055\uffd1\056\uffd1\057\uffd1\067\uffd1\070\uffd1" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\072\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\052\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\067\uffd2\070\uffd2\001\002\000\054\014" +
    "\uffb4\016\062\020\064\024\uffb4\026\120\027\056\030\050" +
    "\031\061\032\052\033\065\034\051\035\067\036\053\040" +
    "\063\041\055\043\066\044\057\045\060\052\121\056\uffb4" +
    "\057\uffb4\001\002\000\030\004\027\005\044\006\035\007" +
    "\033\010\026\020\031\021\037\027\040\042\024\044\021" +
    "\045\034\001\002\000\030\004\027\005\044\006\035\007" +
    "\033\010\026\020\031\021\037\027\040\042\024\044\021" +
    "\045\034\001\002\000\012\014\uffa3\024\uffa3\056\uffa3\057" +
    "\uffa3\001\002\000\006\024\112\057\113\001\002\000\004" +
    "\010\045\001\002\000\072\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\052\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\067\uffd3\070\uffd3\001\002\000" +
    "\004\052\046\001\002\000\030\004\027\005\044\006\035" +
    "\007\033\010\026\020\031\021\037\027\040\042\024\044" +
    "\021\045\034\001\002\000\042\016\062\020\064\027\056" +
    "\030\050\031\061\032\052\033\065\034\051\035\067\036" +
    "\053\040\063\041\055\043\066\044\057\045\060\070\054" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\030\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\001\002\000\072\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040" +
    "\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\052\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\067\uffcc\070\uffcc\001\002\000\030\004" +
    "\027\005\044\006\035\007\033\010\026\020\031\021\037" +
    "\027\040\042\024\044\021\045\034\001\002\000\030\004" +
    "\027\005\044\006\035\007\033\010\026\020\031\021\037" +
    "\027\040\042\024\044\021\045\034\001\002\000\004\010" +
    "\076\001\002\000\030\004\027\005\044\006\035\007\033" +
    "\010\026\020\031\021\037\027\040\042\024\044\021\045" +
    "\034\001\002\000\030\004\027\005\044\006\035\007\033" +
    "\010\026\020\031\021\037\027\040\042\024\044\021\045" +
    "\034\001\002\000\030\004\027\005\044\006\035\007\033" +
    "\010\026\020\031\021\037\027\040\042\024\044\021\045" +
    "\034\001\002\000\030\004\027\005\044\006\035\007\033" +
    "\010\026\020\031\021\037\027\040\042\024\044\021\045" +
    "\034\001\002\000\030\004\027\005\044\006\035\007\033" +
    "\010\026\020\031\021\037\027\040\042\024\044\021\045" +
    "\034\001\002\000\056\014\uffc3\015\uffc3\016\062\017\uffc3" +
    "\020\064\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\056\030" +
    "\uffc3\031\061\040\063\043\uffc3\044\057\045\060\052\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\067\uffc3\070\uffc3\001\002\000" +
    "\072\014\uffc0\015\uffc0\016\062\017\uffc0\020\064\022\uffc0" +
    "\023\uffc0\024\uffc0\026\uffc0\027\056\030\050\031\061\032" +
    "\052\033\065\034\051\035\067\036\053\040\063\041\055" +
    "\043\uffc0\044\057\045\060\052\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\067\uffc0\070\uffc0\001\002\000\056\014\uffc2\015\uffc2" +
    "\016\062\017\uffc2\020\064\022\uffc2\023\uffc2\024\uffc2\026" +
    "\uffc2\027\056\030\uffc2\031\061\040\063\043\uffc2\044\057" +
    "\045\060\052\uffc2\055\uffc2\056\uffc2\057\uffc2\067\uffc2\070" +
    "\uffc2\001\002\000\042\016\062\020\064\022\074\027\056" +
    "\030\050\031\061\032\052\033\065\034\051\035\067\036" +
    "\053\040\063\041\055\043\066\044\057\045\060\001\002" +
    "\000\072\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\052\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\067\uffbe\070\uffbe\001\002\000\072\014\uffcb\015" +
    "\uffcb\016\062\017\uffcb\020\064\022\uffcb\023\uffcb\024\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\043\uffcb\044\057" +
    "\045\uffcb\052\uffcb\055\uffcb\056\uffcb\057\uffcb\067\uffcb\070" +
    "\uffcb\001\002\000\072\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\040\uffbd\041\uffbd\043\uffbd\044\uffbd\045\uffbd\052\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\067\uffbd\070\uffbd\001\002\000\072" +
    "\014\uffca\015\uffca\016\062\017\uffca\020\064\022\uffca\023" +
    "\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\057\045\uffca\052\uffca\055\uffca\056\uffca\057\uffca" +
    "\067\uffca\070\uffca\001\002\000\072\014\uffc8\015\uffc8\016" +
    "\062\017\uffc8\020\064\022\uffc8\023\uffc8\024\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\061\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\040\063\041\uffc8\043\uffc8\044\057\045\uffc8" +
    "\052\uffc8\055\uffc8\056\uffc8\057\uffc8\067\uffc8\070\uffc8\001" +
    "\002\000\072\014\uffc9\015\uffc9\016\062\017\uffc9\020\064" +
    "\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\061\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040\063" +
    "\041\uffc9\043\uffc9\044\057\045\uffc9\052\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\067\uffc9\070\uffc9\001\002\000\056\014\uffc6" +
    "\015\uffc6\016\062\017\uffc6\020\064\022\uffc6\023\uffc6\024" +
    "\uffc6\026\uffc6\027\056\030\uffc6\031\061\040\063\043\uffc6" +
    "\044\057\045\060\052\uffc6\055\uffc6\056\uffc6\057\uffc6\067" +
    "\uffc6\070\uffc6\001\002\000\042\016\062\020\064\027\056" +
    "\030\050\031\061\032\052\033\065\034\051\035\067\036" +
    "\053\040\063\041\055\043\066\044\057\045\060\055\104" +
    "\001\002\000\042\003\041\004\027\005\044\006\035\007" +
    "\033\010\026\020\031\021\037\027\040\042\024\044\021" +
    "\045\034\053\016\060\043\062\030\073\023\001\002\000" +
    "\012\014\uffae\024\uffae\056\uffae\057\uffae\001\002\000\056" +
    "\014\uffc5\015\uffc5\016\062\017\uffc5\020\064\022\uffc5\023" +
    "\uffc5\024\uffc5\026\uffc5\027\056\030\uffc5\031\061\040\063" +
    "\043\uffc5\044\057\045\060\052\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\067\uffc5\070\uffc5\001\002\000\056\014\uffc7\015\uffc7" +
    "\016\062\017\uffc7\020\064\022\uffc7\023\uffc7\024\uffc7\026" +
    "\uffc7\027\056\030\uffc7\031\061\040\063\043\uffc7\044\057" +
    "\045\060\052\uffc7\055\uffc7\056\uffc7\057\uffc7\067\uffc7\070" +
    "\uffc7\001\002\000\056\014\uffc4\015\uffc4\016\062\017\uffc4" +
    "\020\064\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\056\030" +
    "\uffc4\031\061\040\063\043\uffc4\044\057\045\060\052\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\067\uffc4\070\uffc4\001\002\000" +
    "\072\014\uffc1\015\uffc1\016\062\017\uffc1\020\064\022\uffc1" +
    "\023\uffc1\024\uffc1\026\uffc1\027\056\030\uffc1\031\061\032" +
    "\052\033\065\034\051\035\067\036\053\040\063\041\055" +
    "\043\uffc1\044\057\045\060\052\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\067\uffc1\070\uffc1\001\002\000\042\003\041\004\027" +
    "\005\044\006\035\007\033\010\026\020\031\021\037\027" +
    "\040\042\024\044\021\045\034\053\016\060\043\062\030" +
    "\073\023\001\002\000\014\014\uffab\016\uffab\024\uffab\056" +
    "\uffab\057\uffab\001\002\000\006\024\uffa9\057\uffa9\001\002" +
    "\000\072\014\uffcf\015\uffcf\016\062\017\uffcf\020\064\022" +
    "\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041" +
    "\uffcf\043\uffcf\044\057\045\uffcf\052\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\067\uffcf\070\uffcf\001\002\000\042\016\062\020" +
    "\064\023\117\027\056\030\050\031\061\032\052\033\065" +
    "\034\051\035\067\036\053\040\063\041\055\043\066\044" +
    "\057\045\060\001\002\000\072\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\052" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\067\uffb5\070\uffb5\001\002" +
    "\000\042\003\041\004\027\005\044\006\035\007\033\010" +
    "\026\020\031\021\037\027\040\042\024\044\021\045\034" +
    "\053\016\060\043\062\030\073\023\001\002\000\030\004" +
    "\027\005\044\006\035\007\033\010\026\020\031\021\037" +
    "\027\040\042\024\044\021\045\034\001\002\000\050\014" +
    "\uffb3\016\062\020\064\024\uffb3\027\056\030\050\031\061" +
    "\032\052\033\065\034\051\035\067\036\053\040\063\041" +
    "\055\043\066\044\057\045\060\056\uffb3\057\uffb3\001\002" +
    "\000\004\014\124\001\002\000\042\003\041\004\027\005" +
    "\044\006\035\007\033\010\026\020\031\021\037\027\040" +
    "\042\024\044\021\045\034\053\016\060\043\062\030\073" +
    "\023\001\002\000\012\014\uffb0\024\uffb0\056\uffb0\057\uffb0" +
    "\001\002\000\072\014\uffce\015\uffce\016\062\017\uffce\020" +
    "\064\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\040" +
    "\uffce\041\uffce\043\uffce\044\057\045\uffce\052\uffce\055\uffce" +
    "\056\uffce\057\uffce\067\uffce\070\uffce\001\002\000\012\022" +
    "\uffdd\023\uffdd\024\uffdd\057\uffdd\001\002\000\022\010\136" +
    "\011\131\012\137\013\127\021\130\044\135\051\132\066" +
    "\134\001\002\000\012\022\uffdf\023\uffdf\024\uffdf\057\uffdf" +
    "\001\002\000\004\020\152\001\002\000\004\022\151\001" +
    "\002\000\004\010\143\001\002\000\022\010\136\011\131" +
    "\012\137\013\127\021\130\044\135\051\132\066\134\001" +
    "\002\000\012\022\uffdc\023\uffdc\024\uffdc\057\uffdc\001\002" +
    "\000\012\022\uffde\023\uffde\024\uffde\057\uffde\001\002\000" +
    "\012\022\uffd6\023\uffd6\024\uffd6\057\uffd6\001\002\000\006" +
    "\024\uffd9\057\uffd9\001\002\000\006\024\146\057\147\001" +
    "\002\000\004\014\144\001\002\000\022\010\136\011\131" +
    "\012\137\013\127\021\130\044\135\051\132\066\134\001" +
    "\002\000\006\024\uffd7\057\uffd7\001\002\000\004\010\143" +
    "\001\002\000\012\022\uffda\023\uffda\024\uffda\057\uffda\001" +
    "\002\000\006\024\uffd8\057\uffd8\001\002\000\072\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\052\uffb6\055\uffb6\056\uffb6\057\uffb6\067\uffb6" +
    "\070\uffb6\001\002\000\030\004\027\005\044\006\035\007" +
    "\033\010\026\020\031\021\037\027\040\042\024\044\021" +
    "\045\034\001\002\000\042\016\062\017\154\020\064\027" +
    "\056\030\050\031\061\032\052\033\065\034\051\035\067" +
    "\036\053\040\063\041\055\043\066\044\057\045\060\001" +
    "\002\000\030\004\027\005\044\006\035\007\033\010\026" +
    "\020\031\021\037\027\040\042\024\044\021\045\034\001" +
    "\002\000\042\016\062\020\064\022\156\027\056\030\050" +
    "\031\061\032\052\033\065\034\051\035\067\036\053\040" +
    "\063\041\055\043\066\044\057\045\060\001\002\000\004" +
    "\063\157\001\002\000\022\010\136\011\131\012\137\013" +
    "\127\021\130\044\135\051\132\066\134\001\002\000\012" +
    "\022\uffdb\023\uffdb\024\uffdb\057\uffdb\001\002\000\004\023" +
    "\162\001\002\000\012\022\uffd5\023\uffd5\024\uffd5\057\uffd5" +
    "\001\002\000\042\016\062\020\064\027\056\030\050\031" +
    "\061\032\052\033\065\034\051\035\067\036\053\040\063" +
    "\041\055\043\066\044\057\045\060\067\164\001\002\000" +
    "\042\003\041\004\027\005\044\006\035\007\033\010\026" +
    "\020\031\021\037\027\040\042\024\044\021\045\034\053" +
    "\016\060\043\062\030\073\023\001\002\000\012\014\uffb1" +
    "\024\uffb1\056\166\057\uffb1\001\002\000\042\003\041\004" +
    "\027\005\044\006\035\007\033\010\026\020\031\021\037" +
    "\027\040\042\024\044\021\045\034\053\016\060\043\062" +
    "\030\073\023\001\002\000\012\014\uffb2\024\uffb2\056\uffb2" +
    "\057\uffb2\001\002\000\034\003\176\004\027\005\044\006" +
    "\035\007\033\010\026\020\031\021\037\023\174\027\040" +
    "\042\024\044\021\045\034\001\002\000\072\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\052\uffbc\055\uffbc\056\uffbc\057\uffbc\067\uffbc\070" +
    "\uffbc\001\002\000\006\015\uffb9\023\uffb9\001\002\000\006" +
    "\015\177\023\200\001\002\000\072\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\052\uffbb\055\uffbb\056\uffbb\057\uffbb\067\uffbb\070\uffbb\001" +
    "\002\000\044\015\uffb7\016\062\020\064\023\uffb7\027\056" +
    "\030\050\031\061\032\052\033\065\034\051\035\067\036" +
    "\053\040\063\041\055\043\066\044\057\045\060\001\002" +
    "\000\006\015\uffa4\023\uffa4\001\002\000\032\003\176\004" +
    "\027\005\044\006\035\007\033\010\026\020\031\021\037" +
    "\027\040\042\024\044\021\045\034\001\002\000\072\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\022\uffba\023\uffba" +
    "\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\040\uffba\041\uffba\043\uffba" +
    "\044\uffba\045\uffba\052\uffba\055\uffba\056\uffba\057\uffba\067" +
    "\uffba\070\uffba\001\002\000\006\015\uffb8\023\uffb8\001\002" +
    "\000\072\014\uffcd\015\uffcd\016\062\017\uffcd\020\064\022" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041" +
    "\uffcd\043\uffcd\044\057\045\uffcd\052\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\067\uffcd\070\uffcd\001\002\000\042\016\062\020" +
    "\064\027\056\030\050\031\061\032\052\033\065\034\051" +
    "\035\067\036\053\040\063\041\055\043\066\044\057\045" +
    "\060\055\204\001\002\000\042\003\041\004\027\005\044" +
    "\006\035\007\033\010\026\020\031\021\037\027\040\042" +
    "\024\044\021\045\034\053\016\060\043\062\030\073\023" +
    "\001\002\000\012\014\uffaf\024\uffaf\056\uffaf\057\uffaf\001" +
    "\002\000\072\014\uffd0\015\uffd0\016\062\017\uffd0\020\064" +
    "\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0" +
    "\041\uffd0\043\uffd0\044\057\045\uffd0\052\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\067\uffd0\070\uffd0\001\002\000\012\053\000" +
    "\061\000\064\000\072\222\001\002\000\012\053\ufff6\061" +
    "\ufff6\064\ufff6\072\ufff6\001\002\000\006\003\212\010\215" +
    "\001\002\000\016\003\uffa7\010\uffa7\053\uffa7\061\uffa7\064" +
    "\uffa7\072\uffa7\001\002\000\016\003\212\010\215\053\ufff7" +
    "\061\ufff7\064\ufff7\072\ufff7\001\002\000\016\003\ufff5\010" +
    "\ufff5\053\ufff5\061\ufff5\064\ufff5\072\ufff5\001\002\000\004" +
    "\032\216\001\002\000\022\010\136\011\131\012\137\013" +
    "\127\021\130\044\135\051\132\066\134\001\002\000\004" +
    "\024\220\001\002\000\016\003\ufff3\010\ufff3\053\ufff3\061" +
    "\ufff3\064\ufff3\072\ufff3\001\002\000\016\003\ufff4\010\ufff4" +
    "\053\ufff4\061\ufff4\064\ufff4\072\ufff4\001\002\000\006\003" +
    "\267\010\271\001\002\000\010\053\ufff1\061\ufff1\064\ufff1" +
    "\001\002\000\010\053\000\061\234\064\230\001\002\000" +
    "\010\053\uffe7\061\uffe7\064\uffe7\001\002\000\004\053\ufffd" +
    "\001\002\000\010\053\uffea\061\uffea\064\uffea\001\002\000" +
    "\004\010\261\001\002\000\010\053\uffec\061\234\064\230" +
    "\001\002\000\010\053\uffe8\061\uffe8\064\uffe8\001\002\000" +
    "\004\053\uffeb\001\002\000\004\010\235\001\002\000\004" +
    "\021\237\001\002\000\004\014\252\001\002\000\010\003" +
    "\240\010\241\023\243\001\002\000\006\023\uffa5\024\uffa5" +
    "\001\002\000\004\014\250\001\002\000\006\023\246\024" +
    "\245\001\002\000\006\014\uffe4\024\uffe4\001\002\000\006" +
    "\023\uffe2\024\uffe2\001\002\000\006\003\240\010\241\001" +
    "\002\000\006\014\uffe3\024\uffe3\001\002\000\006\023\uffe1" +
    "\024\uffe1\001\002\000\022\010\136\011\131\012\137\013" +
    "\127\021\130\044\135\051\132\066\134\001\002\000\006" +
    "\023\uffe0\024\uffe0\001\002\000\022\010\136\011\131\012" +
    "\137\013\127\021\130\044\135\051\132\066\134\001\002" +
    "\000\004\024\254\001\002\000\016\053\000\054\012\061" +
    "\000\064\000\071\000\072\000\001\002\000\004\053\016" +
    "\001\002\000\004\024\257\001\002\000\010\053\uffe5\061" +
    "\uffe5\064\uffe5\001\002\000\010\053\uffe9\061\uffe9\064\uffe9" +
    "\001\002\000\004\021\237\001\002\000\004\024\263\001" +
    "\002\000\016\053\000\054\012\061\000\064\000\071\000" +
    "\072\000\001\002\000\004\053\016\001\002\000\004\024" +
    "\266\001\002\000\010\053\uffe6\061\uffe6\064\uffe6\001\002" +
    "\000\014\003\uffa6\010\uffa6\053\uffa6\061\uffa6\064\uffa6\001" +
    "\002\000\014\003\ufff0\010\ufff0\053\ufff0\061\ufff0\064\ufff0" +
    "\001\002\000\004\014\274\001\002\000\014\003\267\010" +
    "\271\053\ufff2\061\ufff2\064\ufff2\001\002\000\014\003\uffef" +
    "\010\uffef\053\uffef\061\uffef\064\uffef\001\002\000\024\010" +
    "\136\011\131\012\137\013\127\021\130\025\276\044\135" +
    "\051\132\066\134\001\002\000\004\024\303\001\002\000" +
    "\004\021\277\001\002\000\004\010\300\001\002\000\004" +
    "\023\301\001\002\000\004\024\302\001\002\000\014\003" +
    "\uffed\010\uffed\053\uffed\061\uffed\064\uffed\001\002\000\014" +
    "\003\uffee\010\uffee\053\uffee\061\uffee\064\uffee\001\002\000" +
    "\020\003\uffa8\010\uffa8\053\uffa8\061\uffa8\064\uffa8\071\uffa8" +
    "\072\uffa8\001\002\000\020\003\304\010\307\053\ufffc\061" +
    "\ufffc\064\ufffc\071\ufffc\072\ufffc\001\002\000\020\003\ufffa" +
    "\010\ufffa\053\ufffa\061\ufffa\064\ufffa\071\ufffa\072\ufffa\001" +
    "\002\000\004\032\310\001\002\000\030\004\027\005\044" +
    "\006\035\007\033\010\026\020\031\021\037\027\040\042" +
    "\024\044\021\045\034\001\002\000\042\016\062\020\064" +
    "\024\312\027\056\030\050\031\061\032\052\033\065\034" +
    "\051\035\067\036\053\040\063\041\055\043\066\044\057" +
    "\045\060\001\002\000\020\003\ufff8\010\ufff8\053\ufff8\061" +
    "\ufff8\064\ufff8\071\ufff8\072\ufff8\001\002\000\020\003\ufff9" +
    "\010\ufff9\053\ufff9\061\ufff9\064\ufff9\071\ufff9\072\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\006\003\004\004\003\001\001\000\010\002" +
    "\013\005\014\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\304\016\305\001\001\000\006\002\207" +
    "\007\206\001\001\000\002\001\001\000\004\040\016\001" +
    "\001\000\012\032\035\036\021\037\041\040\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\205\001" +
    "\001\000\002\001\001\000\004\032\202\001\001\000\004" +
    "\032\201\001\001\000\002\001\001\000\004\033\170\001" +
    "\001\000\002\001\001\000\004\032\162\001\001\000\004" +
    "\027\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\115\001\001\000\004\032\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\046\001\001\000" +
    "\002\001\001\000\004\032\110\001\001\000\004\032\107" +
    "\001\001\000\004\032\106\001\001\000\004\032\105\001" +
    "\001\000\004\032\102\001\001\000\004\032\101\001\001" +
    "\000\004\032\100\001\001\000\002\001\001\000\004\032" +
    "\077\001\001\000\004\032\076\001\001\000\002\001\001" +
    "\000\004\032\074\001\001\000\004\032\072\001\001\000" +
    "\004\032\071\001\001\000\004\032\070\001\001\000\004" +
    "\032\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\035\036\104\040\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\035\036\113\040\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\035\036" +
    "\122\040\031\001\001\000\004\032\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\035\036\124\040" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\141\031\140" +
    "\001\001\000\004\027\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\144\001\001\000" +
    "\002\001\001\000\004\031\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\152\001" +
    "\001\000\002\001\001\000\004\032\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\035\036\164\040\031\001\001\000" +
    "\002\001\001\000\010\032\035\036\166\040\031\001\001" +
    "\000\002\001\001\000\010\032\174\034\172\035\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\174\035\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\035\036\204\040\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\222\010\223\001\001\000\002\001" +
    "\001\000\006\013\212\017\213\001\001\000\002\001\001" +
    "\000\004\017\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\271\020\267\001" +
    "\001\000\002\001\001\000\016\002\232\011\225\015\230" +
    "\021\226\022\231\023\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\257\022\231\023\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\235\001\001" +
    "\000\002\001\001\000\006\025\241\026\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\250\001\001" +
    "\000\002\001\001\000\004\027\252\001\001\000\002\001" +
    "\001\000\010\002\013\005\254\006\012\001\001\000\004" +
    "\040\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\261\001\001\000\002\001\001" +
    "\000\010\002\013\005\263\006\012\001\001\000\004\040" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\272\001\001\000\002\001\001\000\004\027\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
              

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= error 
            {
              AbsStmt RESULT =null;
		 RESULT = new AbsExprStmt(null);        RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // argument ::= error 
            {
              AbsValExpr RESULT =null;
		 RESULT = new AbsValName(null);         RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("argument",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter ::= error 
            {
              AbsDecl RESULT =null;
		 RESULT = new AbsTypeDecl(null, null);  RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var ::= error 
            {
              AbsDecl RESULT =null;
		 RESULT = new AbsVarDecl(null, null);   RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= error 
            {
              AbsDecl RESULT =null;
		 RESULT = new AbsTypeDecl(null, null);  RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constant ::= error 
            {
              AbsDecl RESULT =null;
		 RESULT = new AbsConstDecl(null, null); RESULT.error = true; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statements ::= statements SEMIC statement 
            {
              AbsStmts RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmts l = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			l.stmts.add(s);
			RESULT = l;
			l.setEnd(s); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statements ::= statement 
            {
              AbsStmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsStmts l = new AbsStmts(); 
			l.stmts.add(s); 
			RESULT = l; 
			l.setPos(s);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // block ::= BEGIN statements END 
            {
              AbsStmts RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts st = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = st;
			RESULT.setBeg("begin", beleft, beright);
			RESULT.setEnd("end", enleft, enright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // block ::= BEGIN END 
            {
              AbsStmts RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsStmts();
			RESULT.setBeg("begin", beleft, beright);
			RESULT.setEnd("end", enleft, enright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= block 
            {
              AbsStmt RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmts bl = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBlockStmt(bl);
			RESULT.setPos(bl);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= FOR IDENTIFIER ASSIGN value_expression TO value_expression DO statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt st = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsValName name = new AbsValName(id);
			name.setPos(id, idleft, idright);
			RESULT = new AbsForStmt(name, ex1, ex2, st);
			RESULT.setBeg("for", fleft, fright);
			RESULT.setEnd(st);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= WHILE value_expression DO statement 
            {
              AbsStmt RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt st = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsWhileStmt(ex, st);
			RESULT.setBeg("while", whleft, whright);
			RESULT.setEnd(st);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= value_expression QUEST statement COLON statement 
            {
              AbsStmt RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr cond = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int thnleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int thnright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmt thn = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt els = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsIfStmt(cond, thn, els, true);
			RESULT.setBeg("?",condleft, condright);
			RESULT.setEnd(els);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= IF value_expression THEN statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr cond = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int thnleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int thnright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt thn = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsBlockStmt empty = new AbsBlockStmt(new AbsStmts()); 
			empty.setPos(thn);
			RESULT = new AbsIfStmt(cond, thn, empty);
			RESULT.setBeg("if", fleft, fright);
			RESULT.setEnd(thn);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= IF value_expression THEN statement ELSE statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr cond = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int thnleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int thnright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmt thn = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt els = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsIfStmt(cond, thn, els);
			RESULT.setBeg("if", fleft, fright);
			RESULT.setEnd(els);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= value_expression ASSIGN value_expression 
            {
              AbsStmt RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAssignStmt(ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= value_expression 
            {
              AbsStmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsExprStmt(ex);
			RESULT.setPos(ex);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // value_expression ::= LPARENTHESIS value_expression RPARENTHESIS 
            {
              AbsValExpr RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr ex = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = ex;
			RESULT.setBeg("(", lpleft, lpright);
			RESULT.setEnd(")", rpleft, rpright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // value_expression ::= LBRACKET type_expression RBRACKET 
            {
              AbsValExpr RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAlloc(tex);
			RESULT.setBeg("[", lbleft, lbright);
			RESULT.setEnd("]", rbleft, rbright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argument ::= value_expression 
            {
              AbsValExpr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = ex;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("argument",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arguments_list ::= arguments_list COMMA argument 
            {
              AbsValExprs RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExprs al = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr a = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			al.exprs.add(a);
			RESULT = al;
			al.setEnd(a);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("arguments_list",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arguments_list ::= argument 
            {
              AbsValExprs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr a = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsValExprs abxs = new AbsValExprs();
			abxs.exprs.add(a);
			RESULT = abxs;
			RESULT.setPos(a);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("arguments_list",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arguments ::= LPARENTHESIS arguments_list RPARENTHESIS 
            {
              AbsValExprs RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExprs al = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			
			RESULT = al;
			RESULT.setBeg("(", lpleft, lpright);
			RESULT.setEnd(")", rpleft, rpright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arguments ::= LPARENTHESIS RPARENTHESIS 
            {
              AbsValExprs RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsValExprs(); 
			RESULT.setPos("()", lpleft, lpright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // value_expression ::= IDENTIFIER arguments 
            {
              AbsValExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExprs a = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsValName name = new AbsValName(id);
			name.setPos(id, idleft, idright);
			RESULT = new AbsCallExpr(name, a);
			RESULT.setBeg(id,idleft, idright);
			RESULT.setEnd(a);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // value_expression ::= value_expression DOT IDENTIFIER 
            {
              AbsValExpr RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsValName name = new AbsValName(id);
			RESULT = new AbsBinExpr(AbsBinExpr.RECACCESS, ve, name);
			RESULT.setBeg(ve);
			RESULT.setEnd(name);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // value_expression ::= value_expression LBRACKET value_expression RBRACKET 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rbrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rbrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rbr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.ARRACCESS, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd("]", rbrleft, rbrright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value_expression ::= IDENTIFIER 
            {
              AbsValExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsValName(id);
			RESULT.setPos(id, idleft, idright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value_expression ::= value_expression OR value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.OR, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value_expression ::= value_expression AND value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.AND, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value_expression ::= value_expression GEQ value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.GEQ, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value_expression ::= value_expression LEQ value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.LEQ, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value_expression ::= value_expression GTH value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.GTH, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value_expression ::= value_expression LTH value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.LTH, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value_expression ::= value_expression NEQ value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.NEQ, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value_expression ::= value_expression EQU value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.EQU, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value_expression ::= value_expression SUB value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.SUB, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value_expression ::= value_expression ADD value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.ADD, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value_expression ::= value_expression DIV value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.DIV, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value_expression ::= value_expression MUL value_expression 
            {
              AbsValExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsBinExpr(AbsBinExpr.MUL, ex1, ex2);
			RESULT.setBeg(ex1);
			RESULT.setEnd(ex2);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value_expression ::= value_expression PTR 
            {
              AbsValExpr RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object ptr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsUnExpr(AbsUnExpr.VAL, ve);
			RESULT.setBeg(ve);
			RESULT.setEnd("ptr",ptrleft, ptrright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value_expression ::= NOT value_expression 
            {
              AbsValExpr RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsUnExpr(AbsUnExpr.NOT, ve);
			RESULT.setBeg("not",noleft, noright);
			RESULT.setEnd(ve);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value_expression ::= SUB value_expression 
            {
              AbsValExpr RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object su = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsUnExpr(AbsUnExpr.SUB, ve);
			RESULT.setBeg("sub", suleft, suright);
			RESULT.setEnd(ve);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value_expression ::= ADD value_expression 
            {
              AbsValExpr RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsUnExpr(AbsUnExpr.ADD, ve);
			RESULT.setBeg("add", adleft, adright);
			RESULT.setEnd(ve);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value_expression ::= PTR value_expression 
            {
              AbsValExpr RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object ptr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsUnExpr(AbsUnExpr.MEM, ve);
			RESULT.setBeg("ptr", ptrleft, ptrright);
			RESULT.setEnd(ve);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value_expression ::= NIL 
            {
              AbsValExpr RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String nl = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsNilConst();
			RESULT.setPos(nl, nlleft, nlright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value_expression ::= INT_CONST 
            {
              AbsValExpr RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAtomConst(ic, AbsAtomConst.INT);
			RESULT.setPos(ic, icleft, icright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value_expression ::= CHAR_CONST 
            {
              AbsValExpr RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAtomConst(cc, AbsAtomConst.CHAR);
			RESULT.setPos(cc, ccleft, ccright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_expression ::= BOOL_CONST 
            {
              AbsValExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAtomConst(bl, AbsAtomConst.BOOL);
			RESULT.setPos(bl, blleft, blright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_expression ::= LPARENTHESIS type_expression RPARENTHESIS 
            {
              AbsTypeExpr RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		
			RESULT = tex;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_expression ::= PTR type_expression 
            {
              AbsTypeExpr RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsPointerType(tex);
			RESULT.setPos(tex);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // component ::= IDENTIFIER COLON type_expression 
            {
              AbsDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDeclName adn = new AbsDeclName(id);
			adn.setPos(id, idleft, idright);
			RESULT = new AbsVarDecl(adn, tex);
			RESULT.setBeg(adn);
			RESULT.setEnd(tex);

		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("component",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // components_list ::= components_list SEMIC component 
            {
              AbsDecls RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls cl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl co = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			cl.decls.add(co);
			RESULT = cl;
			RESULT.setEnd(co);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("components_list",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // components_list ::= component 
            {
              AbsDecls RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl co = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDecls cl = new AbsDecls();
			cl.decls.add(co);
			RESULT = cl;
			RESULT.setPos(co);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("components_list",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_expression ::= RECORD components_list END 
            {
              AbsTypeExpr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls cl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsRecordType(cl);
			RESULT.setBeg("record", releft, reright);
			RESULT.setEnd("end",enleft, enright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_expression ::= ARRAY LBRACKET value_expression DOTS value_expression RBRACKET OF type_expression 
            {
              AbsTypeExpr RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsValExpr ex1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		Object dts = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsValExpr ex2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsArrayType(tex, ex1, ex2);
			RESULT.setBeg("array", arleft, arright);
			RESULT.setEnd(tex);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_expression ::= IDENTIFIER 
            {
              AbsTypeExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsTypeName(id);
			RESULT.setPos(id, idleft, idright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_expression ::= INT 
            {
              AbsTypeExpr RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAtomType(AbsAtomType.INT);
			RESULT.setPos("int",inleft, inright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_expression ::= CHAR 
            {
              AbsTypeExpr RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAtomType(AbsAtomType.CHAR);
			RESULT.setPos("char",chleft, chright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_expression ::= BOOL 
            {
              AbsTypeExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsAtomType(AbsAtomType.BOOL);
			RESULT.setPos("bool", blleft, blright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_expression",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter ::= IDENTIFIER COLON type_expression 
            {
              AbsDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName name = new AbsDeclName(id); 
			name.setPos(id, idleft, idright);
			RESULT = new AbsVarDecl(name, t); 
			RESULT.setBeg(name); 
			RESULT.setEnd(t); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters_list ::= parameters_list SEMIC parameter 
            {
              AbsDecls RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls l = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl p = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	l.decls.add(p); 
       		RESULT = l; 
       		l.setEnd(p); 
       	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters_list",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters_list ::= parameter 
            {
              AbsDecls RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl p = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls l = new AbsDecls(); 
			l.decls.add(p); 
			RESULT = l; 
			l.setPos(p); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters_list",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters ::= LPARENTHESIS parameters_list RPARENTHESIS 
            {
              AbsDecls RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls p = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	RESULT = p; RESULT.setBeg("(", lleft, lright); 
        	RESULT.setEnd(")", rleft, rright); 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= LPARENTHESIS RPARENTHESIS 
            {
              AbsDecls RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 	RESULT = new AbsDecls(); 
			RESULT.setPos("()", lleft, lright); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= FUNCTION IDENTIFIER parameters COLON type_expression SEMIC declarations block SEMIC 
            {
              AbsDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsDecls p = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls d = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts b = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName name = new AbsDeclName(id); 
       		name.setPos(id, idleft, idright);
            AbsBlockStmt block = new AbsBlockStmt(b); 
            block.setPos(b);
            RESULT = new AbsFunDecl(name, p, t, d, block); 
            RESULT.setBeg("function", fleft, fright); 
            RESULT.setEnd(";", sleft, sright); 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-8)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure ::= PROCEDURE IDENTIFIER parameters SEMIC declarations block SEMIC 
            {
              AbsDecl RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls p = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls d = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts b = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName name = new AbsDeclName(id); 
      		name.setPos(id, idleft, idright);
            AbsBlockStmt block = new AbsBlockStmt(b); 
            block.setPos(b);
            RESULT = new AbsProcDecl(name, p, d, block); 
            RESULT.setBeg("procedure", prleft, prright); 
            RESULT.setEnd(";", sleft, sright);
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // subprogram ::= function 
            {
              AbsDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl f = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 
			RESULT = f; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // subprogram ::= procedure 
            {
              AbsDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl p = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 
			RESULT = p; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subprograms_list ::= subprograms_list subprogram 
            {
              AbsDecls RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls l = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl p = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 
       		l.decls.add(p); 
       		RESULT = l; 
       		l.setEnd(p); 
       	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprograms_list",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subprograms_list ::= subprogram 
            {
              AbsDecls RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl p = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls l = new AbsDecls(); 
			l.decls.add(p); 
			RESULT = l; 
			l.setPos(p); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprograms_list",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // subprograms ::= empty 
            {
              AbsDecls RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 
        	RESULT = new AbsDecls(); 
        	RESULT.setPos("", eleft, eright); 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprograms",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // subprograms ::= subprograms_list 
            {
              AbsDecls RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls p = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = p; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprograms",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var ::= IDENTIFIER COLON AUTO LPARENTHESIS IDENTIFIER RPARENTHESIS SEMIC 
            {
              AbsDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDeclName name = new AbsDeclName(id);
			name.setPos(id, idleft, idright);
			RESULT = new AbsVarDecl(name, compiler.synanal.VariableTable.GetVar(id3), true);
			RESULT.setBeg(id, idleft, idright);
			RESULT.setEnd(";", seleft, seright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var ::= IDENTIFIER COLON type_expression SEMIC 
            {
              AbsDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDeclName name = new AbsDeclName(id);
			name.setPos(id, idleft, idright);
			AbsVarDecl ddd = new AbsVarDecl(name, tex);
			RESULT = ddd;
			RESULT.setBeg(id, idleft, idright);
			RESULT.setEnd(";", seleft, seright);
			compiler.synanal.VariableTable.PutVariable(id, ddd);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vars_list ::= vars_list var 
            {
              AbsDecls RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls vl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl v = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				vl.decls.add(v);
				RESULT = vl;
				vl.setEnd(v);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars_list",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vars_list ::= var 
            {
              AbsDecls RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl v = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				AbsDecls vl = new AbsDecls();
				vl.decls.add(v);
				RESULT = vl;
				vl.setPos(v);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars_list",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars ::= empty 
            {
              AbsDecls RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				AbsDecls dec = new AbsDecls();
				dec.setPos("", eleft, eright);
				RESULT = dec;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vars ::= VAR vars_list 
            {
              AbsDecls RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls vl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				RESULT = vl;
				RESULT.setBeg("var", valeft, varight);
				RESULT.setEnd(vl);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= IDENTIFIER EQU type_expression SEMIC 
            {
              AbsDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr tex = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDeclName dcn = new AbsDeclName(id);
			dcn.setPos(id, idleft, idright);
			RESULT = new AbsTypeDecl(dcn, tex);
			RESULT.setBeg(id, idleft, idright);
			RESULT.setEnd(";",seleft, seright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types_list ::= types_list type 
            {
              AbsDecls RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls tl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl t = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			tl.decls.add(t);
			RESULT = tl;
			tl.setEnd(t);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types_list",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // types_list ::= type 
            {
              AbsDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl t = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDecls tl = new AbsDecls();
			tl.decls.add(t);
			RESULT = tl;
			tl.setPos(t);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types_list",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // types ::= empty 
            {
              AbsDecls RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = new AbsDecls();
			RESULT.setPos("",eleft, eright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // types ::= TYPE types_list 
            {
              AbsDecls RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls tl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			RESULT = tl;
			RESULT.setBeg("type", tpleft, tpright);
			RESULT.setEnd(tl);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= IDENTIFIER EQU value_expression SEMIC 
            {
              AbsDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDeclName dec = new AbsDeclName(id);
			dec.setPos(id, idleft, idright);
			RESULT = new AbsConstDecl(dec, ve);
			RESULT.setBeg(id, idleft, idright);
			RESULT.setEnd(";", seleft, seright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= const_list constant 
            {
              AbsDecls RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls cl = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl c = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				cl.decls.add(c);
				RESULT = cl;
				cl.setEnd(c);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_list",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_list ::= constant 
            {
              AbsDecls RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecl c = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				AbsDecls cl = new AbsDecls();
				cl.decls.add(c);
				RESULT = cl;
				cl.setPos(c);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_list",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants ::= empty 
            {
              AbsDecls RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				RESULT = new AbsDecls();
				RESULT.setPos("",eleft, eright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants ::= CONST const_list 
            {
              AbsDecls RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls c = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
				RESULT = c;
				RESULT.setBeg("const", ctleft, ctright);
				RESULT.setEnd(c);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= constants types vars subprograms 
            {
              AbsDecls RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls c = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls t = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls v = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls p = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDecls list = new AbsDecls();
	        list.decls.addAll(c.decls); list.decls.addAll(t.decls);
            list.decls.addAll(v.decls); list.decls.addAll(p.decls);
	        RESULT = list; RESULT.setBeg(c); RESULT.setEnd(p);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER SEMIC 
            {
              AbsDeclName RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsDeclName name = new AbsDeclName(id);
			name.setPos(id, idleft, idright);
			RESULT = name; 
			RESULT.setBeg("program",prleft, prright);
			RESULT.setEnd(";",seleft, seright);

		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source ::= program declarations block DOT 
            {
              AbsProgram RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDeclName p = (AbsDeclName)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls d = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts bl = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object dot = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		
			AbsBlockStmt block = new AbsBlockStmt(bl);
			block.setPos(bl);
			RESULT = new AbsProgram(p,d, block);
			RESULT.setBeg("program",pleft, pright);
			RESULT.setEnd(".",dotleft, dotright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // empty ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsProgram start_val = (AbsProgram)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

